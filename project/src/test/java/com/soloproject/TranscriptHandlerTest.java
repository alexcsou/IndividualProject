package com.soloproject;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class TranscriptHandlerTest {

    private TranscriptHandler handler;
    private File testFile;

    @Before
    public void setUp() {
        handler = new TranscriptHandler();

    }

    @After
    public void tearDown() {
    }

    @Test
    public void assertInitialisedCorrectly() {
        // lots of asserts in one test...
        assertEquals(0, handler.getParticipants().size());
        assertEquals(0, handler.getSentences().size());
        assertEquals("", handler.getMeetingDurationString());
        assertEquals("", handler.getTranscriptRecognizability());
        assertEquals("", handler.getLanguage());
        assertEquals(null, handler.getStreamButton());
        assertEquals(null, handler.getTeamsButton());
        assertEquals(null, handler.getStreamTranscript());
        assertEquals(null, handler.getTeamsTranscript());
    }

    @Test
    public void assertPotentialErrorWorks1() {
        handler.setStreamTranscript(new File("test1_AutoGeneratedCaption.vtt"));
        handler.setTeamsTranscript(new File("test1_0000-01-01.vtt"));
        assertEquals(handler.potentialError(), false);
    }

    @Test
    public void assertPotentialErrorWorks2() {
        handler.setStreamTranscript(new File("test2_AutoGeneratedCaption.vtt"));
        handler.setTeamsTranscript(new File("test1_0000-01-01.vtt"));
        assertEquals(handler.potentialError(), true);
    }

    @Test
    public void assertPotentialErrorWorks3() {
        handler.setStreamTranscript(new File("test1_AutoGeneratedCaption.vtt"));
        handler.setTeamsTranscript(new File("test1_AutoGeneratedCaption.vtt"));
        assertEquals(handler.potentialError(), true);
    }

    @Test
    public void assertPotentialErrorWorks4() {
        handler.setStreamTranscript(new File("test1.vtt"));
        handler.setTeamsTranscript(new File("test1.vtt"));
        assertEquals(handler.potentialError(), true);
    }

    @Test
    public void assertPotentialErrorWorks5() {
        handler.setStreamTranscript(new File("test1_AutoGeneratedCaption.vtt"));
        handler.setTeamsTranscript(new File("test1_0000-01-01 (1).vtt"));
        assertEquals(handler.potentialError(), false);
    }

    @Test
    public void assertExtractAuthorWorks1() {
        assertEquals("Test User", handler.extractAuthor("<v User, Test>This is a test.</v>"));
    }

    @Test
    public void assertExtractAuthorWorks2() {
        assertNotEquals("Test User", handler.extractAuthor("<v Test, User>This is a test.</v>"));
    }

    @Test
    public void assertExtractAuthorWorks3() {
        assertEquals("Speaker not found", handler.extractAuthor("Test sentence."));
    }

    @Test
    public void assertExtractAuthorWorks4() {
        // double space
        assertNotEquals("Test  User", handler.extractAuthor("<v User, Test>This is a test.</v>"));
    }

    @Test
    public void assertExtractSentenceWorks1() {
        assertEquals("This is a test.", handler.extractSentence("<v User, Test>This is a test.</v>"));
    }

    @Test
    public void assertExtractSentenceWorks2() {
        assertEquals("Sentence not found", handler.extractSentence("Test sentence."));
    }

    @Test
    public void assertExtractSentenceWorks3() {
        assertNotEquals("Random sentence", handler.extractSentence("<v User, Test>This is a test.</v>"));
    }

    @Test
    public void assertExtractSentenceWorks4() {
        // empty sentence
        assertNotEquals("", handler.extractSentence("<></>"));
    }

    @Test
    public void assertGetSentencesAsSingleStringWorks1() {
        handler.getSentences().add(new TranscriptSentence("This is a test", "durationstring", 0.0, 0.0, "author"));
        assertEquals("This is a test", handler.getSentencesAsSingleString());
    }

    @Test
    public void assertGetSentencesAsSingleStringWorks2() {
        handler.getSentences().add(new TranscriptSentence("This is a test", "durationstring", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("And so is this", "durationstring", 0.0, 0.0, "author"));
        assertEquals("This is a testAnd so is this", handler.getSentencesAsSingleString());
    }

    @Test
    public void assertGetSentencesAsSingleStringWorks3() {
        handler.getSentences().add(new TranscriptSentence("This is a test", "durationstring", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("And so is this", "durationstring", 0.0, 0.0, "author"));
        assertNotEquals("This is a test And so is this", handler.getSentencesAsSingleString());
    }

    @Test
    public void assertGetSentencesAsSingleStringWorks4() {
        // empty sentences array
        assertEquals("", handler.getSentencesAsSingleString());
    }

    @Test
    public void assertGetNumberOfWordsWorks1() {
        handler.getSentences().add(new TranscriptSentence("This is a test", "durationstring", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("And so is this", "durationstring", 0.0, 0.0, "author"));
        assertEquals(8, handler.getNumberOfWords());
    }

    @Test
    public void assertGetNumberOfWordsWorks2() {
        handler.getSentences().add(new TranscriptSentence("Thisisatest", "durationstring", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("Andsoisthis", "durationstring", 0.0, 0.0, "author"));
        assertEquals(2, handler.getNumberOfWords());
    }

    @Test
    public void assertGetNumberOfWordsWorks() {
        handler.getSentences().add(new TranscriptSentence("This, is? a! test&", "durationstring", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("And so is this", "durationstring", 0.0, 0.0, "author"));
        assertEquals(8, handler.getNumberOfWords());
    }

    @Test
    public void assertGetNumberOfWordsWorks3() {
        handler.getSentences().add(new TranscriptSentence("This, is? a! test&", "durationstring", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence(", , , ,", "durationstring", 0.0, 0.0, "author"));
        assertEquals(8, handler.getNumberOfWords());
    }

    @Test
    public void assertisValidWorks1() {
        assertEquals(false, handler.isValid("WEBVTT "));
    }

    @Test
    public void assertisValidWorks2() {
        assertEquals(false, handler.isValid("NOTE duration:\"00:42:10\""));
    }

    @Test
    public void assertisValidWorks3() {
        assertEquals(false, handler.isValid("NOTE recognizability:0.819"));
    }

    @Test
    public void assertisValidWorks4() {
        assertEquals(false, handler.isValid("NOTE language:en-us"));
    }

    @Test
    public void assertisValidWorks5() {
        assertEquals(false, handler.isValid(""));
    }

    @Test
    public void assertisValidWorks6() {
        assertEquals(false, handler.isValid("82a0a1f0-b285-4733-a218-f9b93e918372"));
    }

    @Test
    public void assertisValidWorks7() {
        assertEquals(true, handler.isValid("This is a test."));
    }

    @Test
    public void assertisValidWorks8() {
        assertEquals(true, handler.isValid(" I'm a fan of WeVTT, please note this duration, and my language"));
    }

    @Test
    public void assertisValidWorks9() {
        assertEquals(true, handler.isValid("Some big 568868eaeameaem 3 numbers & letters"));
    }

    @Test
    public void assertisValidWorks10() {
        assertEquals(false, handler.isValid(" "));
    }

    @Test
    public void assertIsIDLineWorks1() {
        assertEquals(true, handler.isIDLine("82a0a1f0-b285-4733-a218-f9b93e918372"));
    }

    @Test
    public void assertIsIDLineWorks2() {
        assertEquals(true, handler.isIDLine("000000-000-000-0000-00000000"));
    }

    @Test
    public void assertIsIDLineWorks3() {
        assertEquals(false, handler.isIDLine("82a0a1f0b2854733a218f9b93e918372"));
    }

    @Test
    public void assertIsIDLineWorks4() {
        assertEquals(false, handler.isIDLine(""));
    }

    @Test
    public void assertIsIDLineWorks5() {
        assertEquals(false, handler.isIDLine(" "));
    }

    @Test
    public void assertSecondParserWorks1() {
        assertEquals(60, handler.secondParser("00:01:00"), 0.0);
    }

    @Test
    public void assertSecondParserWorks2() {
        assertEquals(0.0, handler.secondParser("00:00:00"), 0.0);
    }

    @Test
    public void assertSecondParserWorks3() {
        assertEquals(0.0, handler.secondParser("blurb"), 0.0);
    }

    @Test
    public void assertSecondParserWorks4() {
        assertEquals(3661, handler.secondParser("01:01:01"), 0.0);
    }

    @Test
    public void assertSecondParserWorks5() {
        assertEquals(3661, handler.secondParser("000001:0001:0000001"), 0.0);
    }

    @Test
    public void assertSecondParserWorks6() {
        assertEquals(0.0, handler.secondParser("66:99"), 0.0);
    }

    @Test
    public void assertSecondParserWorks7() {
        assertEquals(3602349, handler.secondParser("999:99:9"), 0.0);
    }

    @Test
    public void assertGenerateSentenceWorks1() {

        TranscriptSentence sentence = handler.generateSentence("Test User", "00:00:00.000 --> 00:00:01.540",
                "this is a test");
        assertEquals("Test User", sentence.getAuthor());
    }

    @Test
    public void assertGenerateSentenceWorks2() {

        TranscriptSentence sentence = handler.generateSentence("Test User", "00:00:00.000 --> 00:00:01.540",
                "this is a test");
        assertEquals("this is a test", sentence.getSentence());
    }

    @Test
    public void assertGenerateSentenceWorks3() {

        TranscriptSentence sentence = handler.generateSentence("Test User", "00:00:00.000 --> 00:00:01.540",
                "this is a test");
        assertEquals("00:00:00.000 --> 00:00:01.540", sentence.getdurationString());
    }

    @Test
    public void assertGenerateSentenceWorks4() {

        TranscriptSentence sentence = handler.generateSentence("Test User", "00:00:00.000 --> 00:00:01.540",
                "this is a test");
        assertEquals(1.540, sentence.getDuration(), 0.0);
    }

    @Test
    public void assertGetDurationDataToDoubleWorks1() {

        assertEquals(0, handler.getDurationDataToDouble("00:00:00.000 --> 00:01:00").get(0), 0.0);
        assertEquals(60, handler.getDurationDataToDouble("00:00:00.000 --> 00:01:00").get(1), 0.0);
    }

    @Test
    public void assertGetDurationDataToDoubleWorks2() {

        assertEquals(3661, handler.getDurationDataToDouble("01:01:01 --> 01:01:02").get(0), 0.0);
        assertEquals(3662, handler.getDurationDataToDouble("01:01:01 --> 01:01:02").get(1), 0.0);
    }

    @Test
    public void assertGetDurationDataToDoubleWorks3() {

        assertEquals(1, handler.getDurationDataToDouble("00:00:01.000 --> 00:00:0").get(0), 0.0);
        assertEquals(0, handler.getDurationDataToDouble("00:00:01.000 --> 00:00:0").get(1), 0.0);
    }

    @Test
    public void assertGetDurationDataToDoubleWorks4() {

        assertEquals(0, handler.getDurationDataToDouble("").get(0), 0.0);
        assertEquals(0, handler.getDurationDataToDouble("").get(1), 0.0);
    }

    @Test
    public void assertGetDurationDataToDoubleWorks5() {

        assertEquals(0, handler.getDurationDataToDouble("00:00:00.000 00:01:00").get(0), 0.0);
        assertEquals(0, handler.getDurationDataToDouble("00:00:00.000 00:01:00").get(1), 0.0);
    }

    @Test
    public void assertGetDurationDataToDoubleWorks6() {

        assertEquals(0,
                handler.getDurationDataToDouble("0000000:0000000:0000000.000000 --> 00000000:00001:00000").get(0), 0.0);
        assertEquals(1, handler.getDurationDataToDouble("00000:00000:0000.000000 --> 0000000:0000001:000000").get(1),
                60);
    }

    @Test
    public void assertGetFullSentenceCountWorks1() {
        handler.getSentences().add(new TranscriptSentence("This is is a test.", "", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("This too!", "", 0.0, 0.0, "author"));
        assertEquals(2, handler.getFullSentenceCount());
    }

    @Test
    public void assertGetFullSentenceCountWorks2() {
        handler.getSentences().add(new TranscriptSentence("This is is a test.", "", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("This too!", "", 0.0, 0.0, "author"));
        assertEquals(2, handler.getFullSentenceCount());
    }

    @Test
    public void assertGetFullSentenceCountWorks3() {
        handler.getSentences().add(new TranscriptSentence("This is is a test", "", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("This too.", "", 0.0, 0.0, "author"));
        assertEquals(1, handler.getFullSentenceCount());
    }

    @Test
    public void assertGetFullSentenceCountWorks4() {
        handler.getSentences().add(new TranscriptSentence("This is is a test", "", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("This too", "", 0.0, 0.0, "author"));
        assertEquals(1, handler.getFullSentenceCount());
    }

    @Test
    public void assertGetFullSentenceCountWorks5() {
        handler.getSentences().add(new TranscriptSentence("This is is a test...", "", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("This too!?", "", 0.0, 0.0, "author"));
        handler.getSentences().add(new TranscriptSentence("This too!", "", 0.0, 0.0, "author"));
        assertEquals(3, handler.getFullSentenceCount());
    }
}
